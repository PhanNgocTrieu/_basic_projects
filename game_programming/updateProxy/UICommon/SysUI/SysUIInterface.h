/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p systemifapps_interface.h: ../../../native/1_SETTING_App/systemifapps.xml
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SYSTEMIFAPPS_INTERFACE_H
#define SYSTEMIFAPPS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "SysUI.h"

/*
 * Proxy class for interface hmi.service.sysifapps
 */
class HmiServiceSysifappsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "hmi.service.sysifapps"; }

private:
    HmiServiceSysifappsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);
public:
    
    static HmiServiceSysifappsInterface& getInstance();
    ~HmiServiceSysifappsInterface();

    Q_PROPERTY(QString appID READ appID WRITE setAppID)
    inline QString appID() const
    { return qvariant_cast< QString >(property("appID")); }
    inline void setAppID(const QString &value)
    { setProperty("appID", QVariant::fromValue(value)); }

    Q_PROPERTY(QString appIdTiel READ appIdTiel WRITE setAppIdTiel)
    inline QString appIdTiel() const
    { return qvariant_cast< QString >(property("appIdTiel")); }
    inline void setAppIdTiel(const QString &value)
    { setProperty("appIdTiel", QVariant::fromValue(value)); }

    Q_PROPERTY(bool cameraIsOn READ cameraIsOn WRITE setCameraIsOn)
    inline bool cameraIsOn() const
    { return qvariant_cast< bool >(property("cameraIsOn")); }
    inline void setCameraIsOn(bool value)
    { setProperty("cameraIsOn", QVariant::fromValue(value)); }

    Q_PROPERTY(QString childAppActive READ childAppActive WRITE setChildAppActive)
    inline QString childAppActive() const
    { return qvariant_cast< QString >(property("childAppActive")); }
    inline void setChildAppActive(const QString &value)
    { setProperty("childAppActive", QVariant::fromValue(value)); }

    Q_PROPERTY(QString currentApplication READ currentApplication WRITE setCurrentApplication)
    inline QString currentApplication() const
    { return qvariant_cast< QString >(property("currentApplication")); }
    inline void setCurrentApplication(const QString &value)
    { setProperty("currentApplication", QVariant::fromValue(value)); }

    Q_PROPERTY(QString currentMediaType READ currentMediaType WRITE setCurrentMediaType)
    inline QString currentMediaType() const
    { return qvariant_cast< QString >(property("currentMediaType")); }
    inline void setCurrentMediaType(const QString &value)
    { setProperty("currentMediaType", QVariant::fromValue(value)); }

    Q_PROPERTY(int currentMeterType READ currentMeterType WRITE setCurrentMeterType)
    inline int currentMeterType() const
    { return qvariant_cast< int >(property("currentMeterType")); }
    inline void setCurrentMeterType(int value)
    { setProperty("currentMeterType", QVariant::fromValue(value)); }

    Q_PROPERTY(QString currentPopupPath READ currentPopupPath WRITE setCurrentPopupPath)
    inline QString currentPopupPath() const
    { return qvariant_cast< QString >(property("currentPopupPath")); }
    inline void setCurrentPopupPath(const QString &value)
    { setProperty("currentPopupPath", QVariant::fromValue(value)); }

    Q_PROPERTY(QString currentScreenPath READ currentScreenPath WRITE setCurrentScreenPath)
    inline QString currentScreenPath() const
    { return qvariant_cast< QString >(property("currentScreenPath")); }
    inline void setCurrentScreenPath(const QString &value)
    { setProperty("currentScreenPath", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantList defaultApps READ defaultApps WRITE setDefaultApps)
    inline QVariantList defaultApps() const
    { return qvariant_cast< QVariantList >(property("defaultApps")); }
    inline void setDefaultApps(const QVariantList &value)
    { setProperty("defaultApps", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantList defaultBarApps READ defaultBarApps WRITE setDefaultBarApps)
    inline QVariantList defaultBarApps() const
    { return qvariant_cast< QVariantList >(property("defaultBarApps")); }
    inline void setDefaultBarApps(const QVariantList &value)
    { setProperty("defaultBarApps", QVariant::fromValue(value)); }

    Q_PROPERTY(QVariantList defaultLayout READ defaultLayout WRITE setDefaultLayout)
    inline QVariantList defaultLayout() const
    { return qvariant_cast< QVariantList >(property("defaultLayout")); }
    inline void setDefaultLayout(const QVariantList &value)
    { setProperty("defaultLayout", QVariant::fromValue(value)); }

    Q_PROPERTY(int layoutType READ layoutType WRITE setLayoutType)
    inline int layoutType() const
    { return qvariant_cast< int >(property("layoutType")); }
    inline void setLayoutType(int value)
    { setProperty("layoutType", QVariant::fromValue(value)); }

    Q_PROPERTY(bool showTestApp READ showTestApp WRITE setShowTestApp)
    inline bool showTestApp() const
    { return qvariant_cast< bool >(property("showTestApp")); }
    inline void setShowTestApp(bool value)
    { setProperty("showTestApp", QVariant::fromValue(value)); }
    
    Q_PROPERTY(bool cameraSurfaceIsRunning READ cameraSurfaceIsRunning WRITE setCameraSurfaceIsRunning)
    inline bool cameraSurfaceIsRunning() const
    { return qvariant_cast< bool >(property("cameraSurfaceIsRunning")); }
    inline void setCameraSurfaceIsRunning(bool value)
    { setProperty("cameraSurfaceIsRunning", QVariant::fromValue(value)); }
    

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> backToHomeScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("backToHomeScreen"), argumentList);
    }

    inline QDBusPendingReply<> backToPreviousScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("backToPreviousScreen"), argumentList);
    }

    inline QDBusPendingReply<uicommon::SysUI::TransitionRetCode> callOutToExpand(const QString &app, const QString& screenId = QString(), uicommon::SysUI::TransitionType transitionType = uicommon::SysUI::TransitionType::ShowTransition)
    {
        QList<QVariant> argumentList;
        argumentList << app;
        argumentList << screenId;
        argumentList << QVariant::fromValue(transitionType);
        return asyncCallWithArgumentList(QStringLiteral("callOutToExpand"), argumentList);
    }

    inline QDBusPendingReply<> callToExpandMaxsize(const QString &appId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId);
        return asyncCallWithArgumentList(QStringLiteral("callToExpandMaxsize"), argumentList);
    }

    inline QDBusPendingReply<> callToExpandMaxsize(const QString &appId, bool isFullExpand)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(isFullExpand);
        return asyncCallWithArgumentList(QStringLiteral("callToExpandMaxsize"), argumentList);
    }

    inline QDBusPendingReply<> callToExpandMaxsize(const QString &appId, bool isFullExpand, int screenType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(isFullExpand) << QVariant::fromValue(screenType);
        return asyncCallWithArgumentList(QStringLiteral("callToExpandMaxsize"), argumentList);
    }

    inline QDBusPendingReply<> callToExpandMaxsize(const QString &appId, bool isFullExpand, int screenType, bool enableHeader)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(isFullExpand) << QVariant::fromValue(screenType) << QVariant::fromValue(enableHeader);
        return asyncCallWithArgumentList(QStringLiteral("callToExpandMaxsize"), argumentList);
    }

    inline QDBusPendingReply<> callToShowInternalPopup(const QString &appId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId);
        return asyncCallWithArgumentList(QStringLiteral("callToShowInternalPopup"), argumentList);
    }

    inline QDBusPendingReply<> callToShowInternalPopup(const QString &appId, bool isShowPopup)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(isShowPopup);
        return asyncCallWithArgumentList(QStringLiteral("callToShowInternalPopup"), argumentList);
    }

    inline QDBusPendingReply<> callToShowTopScreen(const QString &appId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId);
        return asyncCallWithArgumentList(QStringLiteral("callToShowTopScreen"), argumentList);
    }

    inline QDBusPendingReply<> callToShowTopScreen(const QString &appId, bool isShowTop)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(isShowTop);
        return asyncCallWithArgumentList(QStringLiteral("callToShowTopScreen"), argumentList);
    }

    inline QDBusPendingReply<> changeDisplayOnOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("changeDisplayOnOff"), argumentList);
    }

    inline QDBusPendingReply<> changeScreenSize(const QString &Apps)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(Apps);
        return asyncCallWithArgumentList(QStringLiteral("changeScreenSize"), argumentList);
    }

    inline QDBusPendingReply<> checkCurrentScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("checkCurrentScreen"), argumentList);
    }

    inline QDBusPendingReply<> enableMultitouchSettingScreen(bool isEnable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(isEnable);
        return asyncCallWithArgumentList(QStringLiteral("enableMultitouchSettingScreen"), argumentList);
    }

    inline QDBusPendingReply<> getAppIDForSignalReturnToTopScreen(const QString &appID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID);
        return asyncCallWithArgumentList(QStringLiteral("getAppIDForSignalReturnToTopScreen"), argumentList);
    }

    inline QDBusPendingReply<> getAppIdForHeader(const QString &appId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId);
        return asyncCallWithArgumentList(QStringLiteral("getAppIdForHeader"), argumentList);
    }

    inline QDBusPendingReply<> getCurrentMeterType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getCurrentMeterType"), argumentList);
    }

    inline QDBusPendingReply<> getDataThroughSys(const QString &in0, const QDBusVariant &var)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(var);
        return asyncCallWithArgumentList(QStringLiteral("getDataThroughSys"), argumentList);
    }

    inline QDBusPendingReply<> getErrorCodeForTest(const QString &appId, const QString &errorCode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(errorCode);
        return asyncCallWithArgumentList(QStringLiteral("getErrorCodeForTest"), argumentList);
    }

    inline QDBusPendingReply<> getFavoriteFromApps(const QString &appId, int eventId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(eventId);
        return asyncCallWithArgumentList(QStringLiteral("getFavoriteFromApps"), argumentList);
    }

    inline QDBusPendingReply<> getNewDefaultBarApps(const QString &first, const QString &second, const QString &third, const QString &fourth, const QString &fifth)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(first) << QVariant::fromValue(second) << QVariant::fromValue(third) << QVariant::fromValue(fourth) << QVariant::fromValue(fifth);
        return asyncCallWithArgumentList(QStringLiteral("getNewDefaultBarApps"), argumentList);
    }

    inline QDBusPendingReply<> getNewSettingInfo(const QString &first, const QString &second, const QString &third)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(first) << QVariant::fromValue(second) << QVariant::fromValue(third);
        return asyncCallWithArgumentList(QStringLiteral("getNewSettingInfo"), argumentList);
    }

    inline QDBusPendingReply<> getPositionToTransfer(double x, double y, const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("getPositionToTransfer"), argumentList);
    }

    inline QDBusPendingReply<> getPositionToTransfer(double x, double y, const QString &id, bool dbClick)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(id) << QVariant::fromValue(dbClick);
        return asyncCallWithArgumentList(QStringLiteral("getPositionToTransfer"), argumentList);
    }

    inline QDBusPendingReply<> getPositionToTransfer(double x, double y, const QString &id, bool dbClick, bool onlyAcceptRelease)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(id) << QVariant::fromValue(dbClick) << QVariant::fromValue(onlyAcceptRelease);
        return asyncCallWithArgumentList(QStringLiteral("getPositionToTransfer"), argumentList);
    }

    inline QDBusPendingReply<> getSettingTileAppId()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getSettingTileAppId"), argumentList);
    }

    inline QDBusPendingReply<> getSettingTileType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getSettingTileType"), argumentList);
    }

    inline QDBusPendingReply<> gotoAndroidApp()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("gotoAndroidApp"), argumentList);
    }

    inline QDBusPendingReply<bool> isLeftDriverPosition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("isLeftDriverPosition"), argumentList);
    }

    inline QDBusPendingReply<> manualDriverPicture()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("manualDriverPicture"), argumentList);
    }

    inline QDBusPendingReply<> manualDriverRecord()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("manualDriverRecord"), argumentList);
    }

    inline QDBusPendingReply<QString> mediaType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("mediaType"), argumentList);
    }

    inline QDBusPendingReply<> notifySettingChanged(const QString &str)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(str);
        return asyncCallWithArgumentList(QStringLiteral("notifySettingChanged"), argumentList);
    }

    inline QDBusPendingReply<> popupRequestShow(bool isShow)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(isShow);
        return asyncCallWithArgumentList(QStringLiteral("popupRequestShow"), argumentList);
    }

    inline QDBusPendingReply<> rePositionWindowItem(const QString &SURFACE_ID, int x, int y)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(SURFACE_ID) << QVariant::fromValue(x) << QVariant::fromValue(y);
        return asyncCallWithArgumentList(QStringLiteral("rePositionWindowItem"), argumentList);
    }

    inline QDBusPendingReply<> receiveAppToCallOut(const QString &appID, int screenID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID) << QVariant::fromValue(screenID);
        return asyncCallWithArgumentList(QStringLiteral("receiveAppToCallOut"), argumentList);
    }

    inline QDBusPendingReply<> receivePhoneApp(const QString &appID, int screenID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID) << QVariant::fromValue(screenID);
        return asyncCallWithArgumentList(QStringLiteral("receivePhoneApp"), argumentList);
    }

    inline QDBusPendingReply<> receiverForMediaType(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("receiverForMediaType"), argumentList);
    }

    inline QDBusPendingReply<> replyResultPopup(const QString &title, const QDBusVariant &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(title) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QStringLiteral("replyResultPopup"), argumentList);
    }

    inline QDBusPendingReply<> requestShowFullApp(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("requestShowFullApp"), argumentList);
    }

    inline QDBusPendingReply<> requestToHome()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestToHome"), argumentList);
    }

    inline QDBusPendingReply<> resizeWindowItem(const QString &SURFACE_ID, int width, int height)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(SURFACE_ID) << QVariant::fromValue(width) << QVariant::fromValue(height);
        return asyncCallWithArgumentList(QStringLiteral("resizeWindowItem"), argumentList);
    }

    inline QDBusPendingReply<> sendDataThroughSys(const QString &in0, const QDBusVariant &var)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(var);
        return asyncCallWithArgumentList(QStringLiteral("sendDataThroughSys"), argumentList);
    }

    inline QDBusPendingReply<> setCloseScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("setCloseScreen"), argumentList);
    }

    inline QDBusPendingReply<> setappIdTiel(const QString &newAppIdTiel)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newAppIdTiel);
        return asyncCallWithArgumentList(QStringLiteral("setappIdTiel"), argumentList);
    }

    inline QDBusPendingReply<> setchildAppActive(const QString &newChildAppActive)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newChildAppActive);
        return asyncCallWithArgumentList(QStringLiteral("setchildAppActive"), argumentList);
    }

    inline QDBusPendingReply<> setlayoutType(int newLayoutType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newLayoutType);
        return asyncCallWithArgumentList(QStringLiteral("setlayoutType"), argumentList);
    }

    inline QDBusPendingReply<> settingTileAppId(const QString &appIdTiel)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appIdTiel);
        return asyncCallWithArgumentList(QStringLiteral("settingTileAppId"), argumentList);
    }

    inline QDBusPendingReply<> showDiagnosticScreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("showDiagnosticScreen"), argumentList);
    }

    inline QDBusPendingReply<> showDiagnosticScreen(bool isEnable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(isEnable);
        return asyncCallWithArgumentList(QStringLiteral("showDiagnosticScreen"), argumentList);
    }

    inline QDBusPendingReply<> updateScreenSuccesfully()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("updateScreenSuccesfully"), argumentList);
    }

    inline QDBusPendingReply<QString> getPreviousApplication()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getPreviousApplication"),  argumentList);
    }
    inline QDBusPendingReply<bool> isFullSizeSurfaceViewTheTop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("isFullSizeSurfaceViewTheTop"), argumentList);
    }


    inline QDBusPendingReply<> requestAACPSurface(const uicommon::SysUI::ServiceAACP& serviceType, bool isShown, const bool& supportShowHeader = true){
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serviceType);
        argumentList << isShown;
        argumentList << supportShowHeader;
        return asyncCallWithArgumentList("requestAACPSurface", argumentList);
    }

    inline QDBusPendingReply<> isReady(QString app)
    {
        return asyncCall("isReady", std::move(app));
    }
    
    inline QDBusPendingReply<> acknowledgeAppReady(QString app)
    {
        return asyncCall("acknowledgeAppReady", std::move(app));
    }
    
    inline QDBusPendingReply<> requestHideSurface(QString app)
    {
        QList<QVariant> argument;
        argument << app;
        return asyncCallWithArgumentList("requestHideSurface", argument);
    }

    
Q_SIGNALS: // SIGNALS
    void onRequestHideApp(QString);
    void onRequestShowApp(QString);
    void addFavoriteToSystem(const QString &appId, int eventId);
    void appIDChanged();
    void appIdTielChanged();
    void backToHome(const QString &previousScreen);
    void backToPrevious();
    void callCameraForHeader(int in0);
    void callCommunicateSettingForHeader(int typeOfScreen);
    void callHDMIForHeader();
    void callScreensOfAGivenApp(const QString &appID, int screenNums);
    void callScreensOfPhoneApp(const QString &appID, int screenNums);
    void calledBackToPrevious();
    void cameraIsOnChanged();
    void childAppActiveChanged();
    void collectAllDataFromApp(const QString &first, const QString &second, const QString &third, const QString &fourth, const QString &fifth, const QString &first_id, const QString &second_id, const QString &third_id);
    void currentApplicationChanged();
    void currentMediaTypeChanged();
    void currentMeterTypeChanged();
    void currentScreenPathChanged();
    void defaultAppsChanged();
    void defaultBarAppsChanged();
    void defaultLayoutChanged();
    void disableWaitingScreen(bool in0);
    void expandScreen(const QString &in0);
    void fullExpandChanged(const QString &appId, bool isFullExpand, int screenType, int changeSate);
    void fullScreenDriverRecorder();
    void keyEvent(ushort key, int xevent);
    void layoutTypeChanged();
    void mediaTypeChanged();
    void notifyReplyResultPopup(const QString &title, const QDBusVariant &data);
    void onSetVolumeMinus();
    void onSetVolumeMute();
    void onSetVolumePlus();
    void popupRequestShowSignal(bool isShow);
    void propagatePosition(double x, double y, const QString &id, bool doubleClick, bool onlyAcceptRelease);
    void receivedUpdateScreenNotification();
    void sendAppIdToHeader(const QString &appId);
    void showInteralPopup(const QString &appId, bool isShowPopup);
    void showTestAppChanged();
    void showTopScreenOnApps(const QString &appId, bool isShowTop);
    void signalChangeScreenSize(const QString &Appid);
    void signalCloseScreenAndroidAuto();
    void signalEnableMultitouchSettingScreen(bool isEnable);
    void signalErrorCodeForTest(const QString &appId, const QString &errorCode);
    void signalGetSettingTielType();
    void signalGetSettingTileAppId();
    void signalReturnToTopScreen(const QString &appID);
    void signalSettingAppIdTile(const QString &appIdTiel);
    void signalShowDiagnosticScreen(bool isEnable);
    void signallingDataThroughApp(const QString &in0, const QDBusVariant &var);
    void signallingDataThroughSys(const QString &in0, const QDBusVariant &var);
    void signallingDataThroughSysOverflowText(const QString& appName, const bool& isActive);
    void signallingDataThroughSysRequestShowApp(const QString& appName);
    void writeNewDefaultBarApps(const QString &first, const QString &second, const QString &third, const QString &fourth, const QString &fifth);
    void writeNewSettingInfo(const QString &first, const QString &second, const QString &third);
    void listPanelAppsChanged(const QString &in0);
    void transitionStateTrigger(uicommon::SysUI::TransitionType type, const QString& app, const QString& eventID);
    void notifyListMeterChanged(const QString &in0);
    void onDriverRecord();
    void onDriverPicture();
    void sigWheelEvent(int code);
    void currentPopupPathChanged();
    void signalCheckPreset(int presetOrder);
    void onCameraSurfaceIsRunningChanged(bool isOn);
};

namespace hmi {
  namespace service {
    typedef ::HmiServiceSysifappsInterface sysifapps;
  }
}
#endif

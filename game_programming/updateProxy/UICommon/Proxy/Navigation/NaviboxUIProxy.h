/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp naviboxui.xml -i naviboxui.h -p NaviboxUIProxy
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NAVIBOXUIPROXY_H
#define NAVIBOXUIPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "naviboxui.h"

/*
 * Proxy class for interface ese.hmi.naviboxui
 */
class NaviboxUIProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "ese.hmi.naviboxui"; }

public:
    NaviboxUIProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~NaviboxUIProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> changeMediaType(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("changeMediaType"), argumentList);
    }

    inline QDBusPendingReply<> notifyState(const QString &appid, NaviboxUIState state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appid) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QStringLiteral("notifyState"), argumentList);
    }

    inline QDBusPendingReply<> requestTransition(const QString &appid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appid);
        return asyncCallWithArgumentList(QStringLiteral("requestTransition"), argumentList);
    }

    inline QDBusPendingReply<> setCurrentApp(const QString &appid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appid);
        return asyncCallWithArgumentList(QStringLiteral("setCurrentApp"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void acceptTransition(const QString &appid);
    void mediaTypeChanged(const QString &type);
};

namespace ese {
  namespace hmi {
    typedef ::NaviboxUIProxy naviboxui;
  }
}
#endif

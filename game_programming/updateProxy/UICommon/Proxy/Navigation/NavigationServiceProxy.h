/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp navigationservice.xml -i navigationservice.h -p NavigationServiceProxy
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NAVIGATIONSERVICEPROXY_H
#define NAVIGATIONSERVICEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "navigationservice.h"

/*
 * Proxy class for interface ese.hmi.navigationservice
 */
class NavigationServiceProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "ese.hmi.navigationservice"; }

public:
    NavigationServiceProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);
    virtual ~NavigationServiceProxy();

    void setType(NavigationProxyType type);
    void sendProxyData(const std::string& str);
    void sendProxyDataToProxy(const NavigationProxyType proxyType, const NavigationIPCType type, const QDBusVariant& var);
    void sendProxyDataToProxy(const NavigationProxyType proxyType, const NavigationIPCType type, const PopupInfo& info);
    void sendProxyDataToProxy(const NavigationProxyType proxyType, const NavigationIPCType type, const PopupResult& result);
    void sendDataToAdaptor(const NavigationIPCType type, const PopupResult& result);

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> showNaviApp(const QString& appId, int dispType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId) << QVariant::fromValue(dispType);
        return asyncCallWithArgumentList(QStringLiteral("showNaviApp"), argumentList);
    }

    inline QDBusPendingReply<> hideNaviApp(const QString& appId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appId);
        return asyncCallWithArgumentList(QStringLiteral("hideNaviApp"), argumentList);
    }

    inline QDBusPendingReply<> sendPopupRespDisp(int featureId, int popupId, int status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(featureId) << QVariant::fromValue(popupId) << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("sendPopupRespDisp"), argumentList);
    }

    //Temporary
    inline QDBusPendingReply<> sendDtvPopupRespDisp(int featureId, int popupId, int status)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(featureId) << QVariant::fromValue(popupId) << QVariant::fromValue(status);
        return asyncCallWithArgumentList(QStringLiteral("sendDtvPopupRespDisp"), argumentList);
    }
    //

    inline QDBusPendingReply<> sendProxyData(const QString &str, const QDBusVariant &var)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(str) << QVariant::fromValue(var);
        return asyncCallWithArgumentList(QStringLiteral("sendProxyData"), argumentList);
    }

    inline QDBusPendingReply<> sendDataToAdaptor(const NavigationIPCType type, const QDBusVariant &var)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(var);
        return asyncCallWithArgumentList(QStringLiteral("sendDataToAdaptor"), argumentList);
    }

    inline QDBusPendingReply<> sendDataToAdaptor(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const QDBusVariant& var)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(proxyType) << QVariant::fromValue(type) << QVariant::fromValue(var);
        return asyncCallWithArgumentList(QStringLiteral("sendDataToAdaptor"), argumentList);
    }

    inline QDBusPendingReply<> sendDataToAdaptor(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupInfo& info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(proxyType) << QVariant::fromValue(type) << QVariant::fromValue(info);
        return asyncCallWithArgumentList(QStringLiteral("sendDataToAdaptor"), argumentList);
    }

    inline QDBusPendingReply<> sendDataToAdaptor(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupResult& result)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(proxyType) << QVariant::fromValue(type) << QVariant::fromValue(result);
        return asyncCallWithArgumentList(QStringLiteral("sendDataToAdaptor"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void adaptorDataReceived(const QString &str, const QDBusVariant &var);
    void screenLayoutChanged(const QString &config);
    void adaptorNotified(const NavigationIPCType type, const QDBusVariant& var);
    void proxyPrivateNotifed(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const QDBusVariant& var);
    void popupInfoPrivateNotified(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupInfo& info);
    void popupResultPrivateNotified(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupResult& result);
    void naviShowOnMeter(const QString& naviType, const int& indexOnMeter,const bool& statusLDD);
    void meterTypeChanged(const int& type);

signals:
    void proxyNotifed(const NavigationIPCType type, const QDBusVariant& var);
    void popupInfoNotified(const NavigationIPCType type, const PopupInfo& info);
    void popupResultNotified(const NavigationIPCType type, const PopupResult& result);

private:
    QString m_appname;
    uint m_id;
    NavigationProxyType m_proxyType {NavigationProxyType::Other};
};

namespace ese {
  namespace hmi {
    typedef ::NavigationServiceProxy navigationservice;
  }
}
#endif

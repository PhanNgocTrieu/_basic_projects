/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp touchservice.xml -i touchservice.h -p TouchProxy
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include <QEvent>
#include <QPointF>
#include "TouchServiceProxy.h"

TouchServiceProxy::TouchServiceProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)
{
    m_listener = nullptr;
}

TouchServiceProxy::~TouchServiceProxy()
{
}

void TouchServiceProxy::listenTo(QObject *object)
{
    object->installEventFilter(this);
}

bool TouchServiceProxy::eventFilter(QObject *obj, QEvent *event)
{
    switch (event->type())
    {
#ifdef BUILD_BOARD
    case QEvent::TouchBegin:
    case QEvent::TouchUpdate:
    case QEvent::TouchEnd: {
        TouchInfo info = takeoutTouchInfo(static_cast<QTouchEvent *>(event));
        sendTouch(info);
        break;
    }
#else
    case QEvent::MouseButtonPress:
    case QEvent::MouseButtonRelease:
    case QEvent::HoverEnter:
    case QEvent::HoverMove:
    case QEvent::HoverLeave: {
        TouchInfo info = takeoutTouchInfo(static_cast<QMouseEvent *>(event));
        sendTouch(info);
        break;
    }
#endif


        default:
            break;
    }
    return true;
}

TouchInfo TouchServiceProxy::takeoutTouchInfo(const QTouchEvent * const touchEvent)
{
    TouchInfo touchInfo;
    if (nullptr != touchEvent)
    {
        const auto &touchPoints = touchEvent->points();

        touchInfo.type = touchEvent->type();

        for (const auto &point : touchPoints)
        {
            // タッチ座標情報
            TouchPoint touchPoint;
            touchPoint.id = point.id();                                 // ポイントID
            touchPoint.state = point.state();                           // ポイントステータス
            touchPoint.scenePositionX = point.scenePosition().x();      // シーン位置
            touchPoint.scenePositionY = point.scenePosition().y();      // シーン位置
            touchPoint.globalPositionX = point.globalPosition().x();    // グローバル位置
            touchPoint.globalPositionY = point.globalPosition().y();    // グローバル位置

            touchInfo.points.append(touchPoint);
        }
    }
    return touchInfo;
}

TouchInfo TouchServiceProxy::takeoutTouchInfo(const QMouseEvent * const touchEvent)
{
    TouchInfo touchInfo;
    if (nullptr != touchEvent)
    {
        int button = touchEvent->button();
        int buttons = touchEvent->buttons();

        touchInfo.type = touchEvent->type();
        TouchPoint point = {
            .scenePositionX = touchEvent->pos().x(),
            .scenePositionY = touchEvent->pos().y(),
            .globalPositionX = button,
            .globalPositionY = buttons,
        };
        touchInfo.points.append(point);
    }
    return touchInfo;
}


/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp navigationservice.xml -i navigationservice.h -p NavigationServiceProxy
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include <QString>
#include "NavigationServiceProxy.h"

/*
 * Implementation of interface class NavigationServiceProxy
 */

NavigationServiceProxy::NavigationServiceProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)
{
    m_id = reinterpret_cast<std::uintptr_t>(this);
    m_proxyType = NavigationProxyType::Other;
    connect(this, &NavigationServiceProxy::proxyPrivateNotifed, [this](const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const QDBusVariant& var) {

        if ((id == 0) && (m_proxyType == proxyType)) {
            emit adaptorNotified(type, var);
        } else if ((id != static_cast<uint>(m_id)) && (m_proxyType == proxyType)) {
            emit proxyNotifed(type, var);
        } else {
            //MISRA.IF.NO_ELSE
        }
    });

    connect(this, &NavigationServiceProxy::popupInfoPrivateNotified, [this](const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupInfo &info) {

        if (((id != m_id) || (id == 0)) && (m_proxyType == proxyType)) {
            emit popupInfoNotified(type, info);
        }
    });

    connect(this, &NavigationServiceProxy::popupResultPrivateNotified, [this](const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupResult &result) {

        if (((id != m_id) || (id == 0)) && (m_proxyType == proxyType)) {
            emit popupResultNotified(type, result);
        }
    });
}

NavigationServiceProxy::~NavigationServiceProxy()
{
}

void NavigationServiceProxy::setType(NavigationProxyType type)
{
    m_proxyType = type;
}

void NavigationServiceProxy::sendProxyData(const std::string &str)
{
    sendProxyData(NOTIFI_SETTING_CHANGED, QDBusVariant(QString::fromStdString(str)));
}

void NavigationServiceProxy::sendProxyDataToProxy(const NavigationProxyType proxyType, const NavigationIPCType type, const QDBusVariant &var)
{
    if(m_id >= 0){
// Fix klocwork START
        (void)sendDataToAdaptor(static_cast<uint>(m_id), proxyType, type, var);
// Fix klocwork END
    }
}

void NavigationServiceProxy::sendProxyDataToProxy(const NavigationProxyType proxyType, const NavigationIPCType type, const PopupInfo &info)
{
// Fix klocwork START
    (void)sendDataToAdaptor(static_cast<int>(m_id), proxyType, type, info);
// Fix klocwork END
}

void NavigationServiceProxy::sendProxyDataToProxy(const NavigationProxyType proxyType, const NavigationIPCType type, const PopupResult &result)
{
// Fix klocwork START
    (void)sendDataToAdaptor(static_cast<int>(m_id), proxyType, type, result);
// Fix klocwork END
}

void NavigationServiceProxy::sendDataToAdaptor(const NavigationIPCType type, const PopupResult &result)
{
// Fix klocwork START
    (void)sendDataToAdaptor(0, NavigationProxyType::Other, type, result);
// Fix klocwork END
}

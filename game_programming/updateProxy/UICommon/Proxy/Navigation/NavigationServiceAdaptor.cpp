/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp navigationservice.xml -i navigationservice.h -a NavigationServiceAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "NavigationServiceAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class NavigationserviceAdaptor
 */

NavigationserviceAdaptor::NavigationserviceAdaptor(NavigationService *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

NavigationserviceAdaptor::~NavigationserviceAdaptor()
{
    // destructor
}

void NavigationserviceAdaptor::showNaviApp(const QString& appId, int dispType)
{
    parent()->showNaviApp(appId, dispType);
}

void NavigationserviceAdaptor::hideNaviApp(const QString& appId)
{
    parent()->hideNaviApp(appId);
}

void NavigationserviceAdaptor::sendPopupRespDisp(int featureId, int popupId, int status)
{
    parent()->sendPopupRespDisp(featureId, popupId, status);
}

//Temporary
void NavigationserviceAdaptor::sendDtvPopupRespDisp(int featureId, int popupId, int status)
{
    parent()->sendDtvPopupRespDisp(featureId, popupId, status);
}
//

void NavigationserviceAdaptor::sendProxyData(const QString &str, const QDBusVariant &var)
{
    parent()->sendProxyData(str, var);
}

void NavigationserviceAdaptor::sendDataToAdaptor(const NavigationIPCType type, const QDBusVariant &var)
{
    parent()->sendDataToAdaptor(type, var);
}

void NavigationserviceAdaptor::sendDataToAdaptor(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const QDBusVariant &var)
{
    parent()->sendDataToAdaptor(id, proxyType, type, var);
}

void NavigationserviceAdaptor::sendDataToAdaptor(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupInfo &info)
{
    parent()->sendDataToAdaptor(id, proxyType, type, info);
}

void NavigationserviceAdaptor::sendDataToAdaptor(const uint id, const NavigationProxyType proxyType, const NavigationIPCType type, const PopupResult &result)
{
    parent()->sendDataToAdaptor(id, proxyType, type, result);
}

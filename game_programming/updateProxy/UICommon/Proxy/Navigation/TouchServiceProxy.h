/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp touchservice.xml -i touchservice.h -p TouchProxy
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TOUCHSERVICEPROXY_H
#define TOUCHSERVICEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "touchservice.h"

/*
 * Proxy class for interface local.TouchService
 */
class TouchServiceProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "ese.hmi.TouchService"; }

public:
    TouchServiceProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);
    ~TouchServiceProxy();

    Q_INVOKABLE void listenTo(QObject *object);
protected:
    bool eventFilter(QObject *obj, QEvent *event) override;

private:
    TouchInfo takeoutTouchInfo(const QTouchEvent* const touchEvent);
    TouchInfo takeoutTouchInfo(const QMouseEvent* const touchEvent);

private:
    QObject *m_listener = nullptr;

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> sendTouch(TouchInfo info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(info);
        return asyncCallWithArgumentList(QStringLiteral("sendTouch"), argumentList);
    }
Q_SIGNALS: // SIGNALS
};

namespace ese {
  namespace hmi {
    typedef ::TouchServiceProxy TouchService;
  }
}
#endif

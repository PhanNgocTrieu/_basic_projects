/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p ConnectedServiceProxy -c ConnectedServiceProxy ConnectedServiceInf.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CONNECTEDSERVICEPROXY_H
#define CONNECTEDSERVICEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "UICommon_global.h"

namespace uicommon {
    /*
    * Proxy class for interface ese.hmi.csif
    */
    class UICOMMON_EXPORT ConnectedServiceProxy: public QDBusAbstractInterface
    {
        Q_OBJECT
    public: 
        static inline const char *staticInterfaceName()
        { return "ese.hmi.csif"; }

    public:
        static ConnectedServiceProxy* getInstance();
        ~ConnectedServiceProxy();

    protected:
        ConnectedServiceProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);


    public Q_SLOTS: // METHODS
        inline QDBusPendingReply<> requestDeleteDigitalKey()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("requestDeleteDigitalKey"), argumentList);
        }

        inline QDBusPendingReply<> requestEndCall()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("requestEndCall"), argumentList);
        }

        inline QDBusPendingReply<bool> requestGetDigitalKeyActiveStatus()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("requestGetDigitalKeyActiveStatus"), argumentList);
        }

        inline QDBusPendingReply<bool> requestGetDigitalKeySettingStatus()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("requestGetDigitalKeySettingStatus"), argumentList);
        }

        inline QDBusPendingReply<> requestResetNetwork()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("requestResetNetwork"), argumentList);
        }

        inline QDBusPendingReply<> requestSetDigitalKeySettingStatus(bool digKeySetStt)
        {
            QList<QVariant> argumentList;
            argumentList << QVariant::fromValue(digKeySetStt);
            return asyncCallWithArgumentList(QStringLiteral("requestSetDigitalKeySettingStatus"), argumentList);
        }

        inline QDBusPendingReply<> requestStartCall()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("requestStartCall"), argumentList);
        }

    Q_SIGNALS: // SIGNALS
        void networkResultChanged(int networkResult);
        void onCompletedStartOpening();
        void onConnectedChanged(bool _tele, bool _conSetFlag);
        void onConnectedListChanged(const QString &conInfList);
        void onDCMWaveStatusChanged(int dcmWaveStatus);
        void onDigitalKeyActiveStatusChanged(bool dcmWaveStatus);
        void onDigitalKeyResponseResult(int digKeyRespRes);
        void onDigitalKeySettingStatusChanged(bool value);
        void onInforChanged(const QString &listConnectedInf);
        void onNetworkResultChanged(int networkResult);
        void wallpaperDownloadStatusChanged(int wallDownStt);
    };
}
#endif

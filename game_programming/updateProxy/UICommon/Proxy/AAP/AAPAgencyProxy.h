/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c AAPAgencyProxy -p AAPAgencyProxy AAPAgency.xml
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef AAPAGENCYPROXY_H
#define AAPAGENCYPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "AAPAgency.h"

namespace uicommon
{
    /*
    * Proxy class for interface ese.hmi.aapagency
    */
    class AAPAgencyProxy: public QDBusAbstractInterface
    {
        Q_OBJECT
        
    public:
        static inline const char *staticInterfaceName()
        { return "ese.hmi.aapagency"; }
        static AAPAgencyProxy &getInstance();
        
        ~AAPAgencyProxy();

    protected:
        AAPAgencyProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);


    public Q_SLOTS: // METHODS
        inline QDBusPendingReply<int> getCurrentState()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("getCurrentState"), argumentList);
        }

        inline QDBusPendingReply<bool> setOperationMode(int mode)
        {
            QList<QVariant> argumentList;
            argumentList << QVariant::fromValue(mode);
            return asyncCallWithArgumentList(QStringLiteral("setOperationMode"), argumentList);
        }

        inline QDBusPendingReply<bool> setSourceOn(bool isSourceOn)
        {
            QList<QVariant> argumentList;
            argumentList << QVariant::fromValue(isSourceOn);
            return asyncCallWithArgumentList(QStringLiteral("setSourceOn"), argumentList);
        }

        inline QDBusPendingReply<bool> enjectKeyEvent(int keyCode, int keyStatus)
        {
            QList<QVariant> argumentList;
            argumentList << QVariant::fromValue(keyCode) << QVariant::fromValue(keyStatus);
            return asyncCallWithArgumentList(QStringLiteral("enjectKeyEvent"), argumentList);
        }

        inline QDBusPendingReply<uicommon::AAPAgency::MediaMetaData> getMediaMetaData()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("getMediaMetaData"), argumentList);
        }

        inline QDBusPendingReply<uicommon::AAPAgency::MediaStatus> getMediaStatus()
        {
            QList<QVariant> argumentList;
            return asyncCallWithArgumentList(QStringLiteral("getMediaStatus"), argumentList);
        }

        inline QDBusPendingReply<bool> requestSetAAContrastStepValue(QString detail)
        {
            QList<QVariant> argList;
            argList << detail;
            return asyncCallWithArgumentList(QStringLiteral("setAAPContrastStepValue"), argList);
        }

        inline QDBusPendingReply<bool> requestSetAAColorStepValue(QString detail)
        {
            QList<QVariant> argList;
            argList << detail;
            return asyncCallWithArgumentList(QStringLiteral("setAAPColorStepValue"), argList);
        }

        inline QDBusPendingReply<QString> requestGetAAContrastStepValue()
        {
            QList<QVariant> argList;
            return asyncCallWithArgumentList(QStringLiteral("getAAPContrastStepValue"), argList);
        }

        inline QDBusPendingReply<QString> requestGetAAColorStepValue()
        {
            QList<QVariant> argList;
            return asyncCallWithArgumentList(QStringLiteral("getAAPColorStepValue"), argList);
        }

        inline QDBusPendingReply<int>   requestGetAAPDayColorValue()
        {
            QList<QVariant> argList;
            return asyncCallWithArgumentList(QStringLiteral("getAAPDayColorValue"), argList);
        }

        inline QDBusPendingReply<int>   requestGetAAPDayContrastValue()
        {
            QList<QVariant> argList;
            return asyncCallWithArgumentList(QStringLiteral("getAAPDayContrastValue"), argList);
        }
        
        inline QDBusPendingReply<int>   requestGetAAPNightColorValue()
        {
            QList<QVariant> argList;
            return asyncCallWithArgumentList(QStringLiteral("getAAPNightColorValue"), argList);
        }

        inline QDBusPendingReply<int>   requestGetAAPNightContrastValue()
        {
            QList<QVariant> argList;
            return asyncCallWithArgumentList(QStringLiteral("getAAPNightContrastValue"), argList);
        }

        inline QDBusPendingReply<bool>   requestSetAAPDayColorValue(int value)
        {
            QList<QVariant> argList;
            argList << value;
            return asyncCallWithArgumentList(QStringLiteral("setAAPDayColorValue"), argList);
        }

        inline QDBusPendingReply<bool>   requestSetAAPDayContrastValue(int value)
        {
            QList<QVariant> argList;
            argList << value;
            return asyncCallWithArgumentList(QStringLiteral("setAAPDayContrastValue"), argList);
        }

        inline QDBusPendingReply<bool>   requestSetAAPNightColorValue(int value)
        {
            QList<QVariant> argList;
            argList << value;
            return asyncCallWithArgumentList(QStringLiteral("setAAPNightColorValue"), argList);
        }

        inline QDBusPendingReply<bool>   requestSetAAPNightContrastValue(int value)
        {
            QList<QVariant> argList;
            argList << value;
            return asyncCallWithArgumentList(QStringLiteral("setAAPNightContrastValue"), argList);
        }

    Q_SIGNALS: // SIGNALS
        void onStateChanged(int oldState, int newState);
        void onAudioMediaStatusChangeSignal(int oldState,int newState);
        void onMediaMetaDataChanged(uicommon::AAPAgency::MediaMetaData metaData);
        void onMediaStatusChanged(uicommon::AAPAgency::MediaStatus mediaStatus);
        void onNotifySetAAPDayColorValue(int value);
        void onNotifySetAAPDayContrastValue(int value);
        void onNotifySetAAPNightColorValue(int value);
        void onNotifySetAAPNightContrastValue(int value);
        void onNotifyAAPVRStatus(int vrStatus);
    };

}
#endif

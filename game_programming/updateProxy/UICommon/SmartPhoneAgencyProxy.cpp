/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c SmartPhoneAgencyProxy -p SmartPhoneAgencyProxy SmartPhoneAgency.xml
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "SmartPhoneAgencyProxy.h"

namespace uicommon
{
    /*
     * Implementation of interface class SmartPhoneAgencyProxy
     */

    SmartPhoneAgencyProxy &SmartPhoneAgencyProxy::getInstance()
    {
        static SmartPhoneAgencyProxy singleton("ese.hmi.setting", "/SmartPhoneAgency", QDBusConnection::sessionBus());

        return singleton;
    }

    SmartPhoneAgencyProxy::SmartPhoneAgencyProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
        : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)
    {
    }

    SmartPhoneAgencyProxy::~SmartPhoneAgencyProxy()
    {
    }

    void SmartPhoneAgencyProxy::getDeviceList(const std::function<void(uint, const QList<uicommon::SmartPhoneAgency::DeviceInfo>&)>& confirmCallback)   
    {
        QDBusPendingCall async =   asyncCall(QStringLiteral("getDeviceList"));
        QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(async, this);
        QObject::connect(watcher, &QDBusPendingCallWatcher::finished, [confirmCallback] (QDBusPendingCallWatcher *watcher){
            QDBusPendingReply<QList<uicommon::SmartPhoneAgency::DeviceInfo>> reply = *watcher;
            if (reply.isError()) {
                confirmCallback(1,reply.value());
            } else {
                confirmCallback(0, reply.value());
            }
            watcher->deleteLater();
        });
    }

    void SmartPhoneAgencyProxy::getCurrentSession(const std::function<void(bool, const uicommon::SmartPhoneAgency::DeviceInfo&)>& confirmCallback)
    {
        QDBusPendingCall async =   asyncCall("getCurrentSession");
        QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(async, this);
        QObject::connect(watcher, &QDBusPendingCallWatcher::finished,this, [this,confirmCallback] (QDBusPendingCallWatcher *watcher){
            QDBusPendingReply<bool,uicommon::SmartPhoneAgency::DeviceInfo> reply = *watcher;
            if (reply.isError()) {
                qInfo() << "--> Error Message: " << reply.error().message();
                confirmCallback(1,uicommon::SmartPhoneAgency::DeviceInfo());
            } else {
                confirmCallback(reply.argumentAt<0>(), reply.argumentAt<1>());

            }
            watcher->deleteLater();
        });
    }
    
}

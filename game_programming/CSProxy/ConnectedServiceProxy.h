/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -l ConnectedService -c ConnectedServiceInf -a ConnectedServiceAdaptor -p ConnectedServiceProxy ConnectedServiceInf.xml
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CONNECTEDSERVICEPROXY_H
#define CONNECTEDSERVICEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface ese.hmi.csif
 */
class ConnectedServiceInf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "ese.hmi.csif"; }

public:
    ConnectedServiceInf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ConnectedServiceInf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> requestDeleteDigitalKey()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestDeleteDigitalKey"), argumentList);
    }

    inline QDBusPendingReply<> requestEndCall()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestEndCall"), argumentList);
    }

    inline QDBusPendingReply<QList<srvwrp::ConnectedServiceWrapper::ConnectedInformation> > requestGetConnectedInformations()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestGetConnectedInformations"), argumentList);
    }

    inline QDBusPendingReply<int> requestGetDigitalKeyActiveStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestGetDigitalKeyActiveStatus"), argumentList);
    }

    inline QDBusPendingReply<int> requestGetDigitalKeySettingStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestGetDigitalKeySettingStatus"), argumentList);
    }

    inline QDBusPendingReply<QList<srvwrp::ConnectedServiceWrapper::ImageDataBase64> > requestListWallPaperDownload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestListWallPaperDownload"), argumentList);
    }

    inline QDBusPendingReply<int> requestResetNetwork()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestResetNetwork"), argumentList);
    }

    inline QDBusPendingReply<> requestSetDigitalKeyActiveStatus(int digKeySetActStt)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(digKeySetActStt);
        return asyncCallWithArgumentList(QStringLiteral("requestSetDigitalKeyActiveStatus"), argumentList);
    }

    inline QDBusPendingReply<> requestSetDigitalKeySettingStatus(int digKeySetStt)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(digKeySetStt);
        return asyncCallWithArgumentList(QStringLiteral("requestSetDigitalKeySettingStatus"), argumentList);
    }

    inline QDBusPendingReply<> requestStartCall()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestStartCall"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void onCompletedStartOpening();
    void onConnectedChanged(const QString &signalName, const QDBusVariant &value);
    void onConnectedListChanged(const QString &conInfList);
    void onDCMWaveStatusChanged(srvwrp::ConnectedServiceWrapper::DcmWaveStatus dcmWaveStatus);
    void onDigitalKeyActiveStatusChanged(srvwrp::ConnectedServiceWrapper::DigitalKeyActiveStatus dcmWaveStatus);
    void onDigitalKeyResponseResult(srvwrp::ConnectedServiceWrapper::DigitalKeyResponseResult digKeyRespRes);
    void onDigitalKeySettingStatusChanged(srvwrp::ConnectedServiceWrapper::DigitalKeySettingStatus value);
    void onInforChanged(const QList<srvwrp::ConnectedServiceWrapper::ConnectedInformation> &listConnectedInf);
    void onNetworkResultChanged(srvwrp::ConnectedServiceWrapper::NetworkConnectionResetResult networkResult);
    void wallpaperDownloadStatusChanged(int wallDownStt);
};

namespace ese {
  namespace hmi {
    typedef ::ConnectedServiceInf csif;
  }
}
#endif
